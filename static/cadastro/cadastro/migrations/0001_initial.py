# Generated by Django 2.2.1 on 2020-09-28 19:46

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('username', models.CharField(max_length=20, unique=True, verbose_name='ID do usuário')),
                ('tipo_pessoa', models.CharField(choices=[('INTEGRADOR', 'INTEGRADOR'), ('LICENCIADO', 'LICENCIADO'), ('GESTOR', 'GESTOR'), ('USUARIO', 'USUARIO')], max_length=20, verbose_name='Tipo Pessoa')),
                ('rg', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='RG')),
                ('cpf', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='CPF/CNPJ')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('telefone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefone')),
                ('endereco', models.CharField(blank=True, max_length=100, null=True, verbose_name='Endereço')),
                ('numero', models.PositiveIntegerField(blank=True, null=True, verbose_name='Número')),
                ('cidade', models.CharField(blank=True, max_length=50, null=True, verbose_name='Cidade')),
                ('bairro', models.CharField(blank=True, max_length=50, null=True, verbose_name='Bairro')),
                ('estado', models.CharField(blank=True, choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], max_length=20, null=True, verbose_name='Estado')),
                ('pais', models.CharField(blank=True, choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], max_length=20, null=True, verbose_name='Pais')),
                ('is_staff', models.BooleanField(default=False, verbose_name='É da equipe')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'ordering': ['-id'],
                'permissions': [('pode_cadastrar_usuario', 'Pode configurar usuario'), ('pode_acessar_painel_principal', 'Pode visualizar o painel principal'), ('pode_gerar_relatorios', 'Pode gerar relatorios'), ('pode_fazer_acionamentos', 'Pode fazer acionamentos'), ('pode_acessar_central_alarmes', 'Pode acessar a central de alarmes'), ('pode_editar_cadastro_tecnico', 'Pode editar cadastro tecnico'), ('pode_alterar_meta', 'Pode alterar meta'), ('pode_acessar_central_vazao', 'Pode acessar a central de vazao'), ('pode_acessar_central_bomba', 'Pode acessar a central de bomba'), ('pode_enviar_mensagem', 'Pode enviar mensagem'), ('pode_visualizar_relatorios', 'Pode visualizar relatorios')],
            },
        ),
        migrations.CreateModel(
            name='Empreendimento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nomeEmpreendimento', models.CharField(max_length=50, verbose_name='Nome do Empreendimento')),
                ('cnpj', models.IntegerField(unique=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999999)], verbose_name='CNPJ')),
                ('endereco', models.CharField(max_length=100, verbose_name='Endereço')),
                ('matricula', models.CharField(max_length=20, unique=True, verbose_name='Matrícula da Concessionária')),
                ('celular', models.CharField(max_length=20, verbose_name='Celular')),
                ('telefone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefone')),
                ('cicloCobranca', models.DateField(default=django.utils.timezone.now, verbose_name='Ciclo de Cobrança')),
                ('tipo_classificacao', models.CharField(choices=[('HOSPITAL', 'HOSPITAL'), ('HOTEL', 'HOTEL'), ('RESIDENCIAL', 'RESIDENCIAL')], max_length=20, verbose_name='Classificação')),
                ('tipo_servico', models.CharField(choices=[('STANDARD', 'STANDARD'), ('ULTRA', 'ULTRA'), ('PREMIUM', 'PREMIUM')], max_length=20, verbose_name='Tipo de Serviço')),
                ('qtdReservatorioInf', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Quantidade do Reservatório Inferior')),
                ('qtdReservatorioSup', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Quantidade do Reservatório Superior')),
                ('setValvula', models.BooleanField(default=False, verbose_name='Possui válvula de controle: ')),
                ('qtdValvula', models.IntegerField(default='0', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(999)], verbose_name='Quantidade de Válvula')),
                ('volReservatorio', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Volume dos Reservatórios')),
                ('setAguaAlternativa', models.BooleanField(default=False, verbose_name='Tem água alternativa: ')),
                ('qtdAguaAlternativa', models.DecimalField(decimal_places=2, default='0', max_digits=3, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Quantidade de Água Alternativa')),
                ('alturaReservatorio', models.DecimalField(decimal_places=2, max_digits=3, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Altura do Reservatório')),
                ('qtdPontosEntrada', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Pontos de Entrada')),
                ('qtdPontosConsumo', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Pontos de Consumo')),
                ('qtdUnidadeConsumidora', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Quantidade de Unidade Consumidora')),
                ('meta', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Meta')),
                ('aguaAlternFornecida', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Água Alternativa Fornecida')),
                ('responsavel', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
